■パターン3
VA様からの提案されたパターン。

[[メリット／デメリット]]
・メリット
　・コマンド毎に分かれており、既存のnfvなどに反映させ易い。
　・データ毎にパラメータが設定されている為、設定内容が分かり易い。
　・sppプロセス側の処理が配列の順番となり、指示する側の好きな順番で処理が行える。

・デメリット
　・パターン1〜2よりSPPプロセス側の処理が多い。
　・1つの設定につき、1コマンドとして設定が必要な為、データ量が多い。

[[Json形式での記述例]]
・設定例
　・指示(コマンドライブラリ⇒sppプロセス)
　　設定は複数まとめてでも、個々に送信でも可能。
{
  "commands": [
    {　// ポート追加例
      "command": "add",
      "ports": [ "ring0" ]
    },
    {　// SPPコンポーネント設定例(classifier)
      "command": "component",
      "core_id": "2",
      "type": "classifier",
      "rx_ports": [ "nic0" ],
      "tx_ports": [ "ring0", "ring1", "ring2" ]
    },
    {　// SPPコンポーネント設定例(merge)
      "command": "component",
      "core_id": "4",
      "type":  "merge",
      "rx_ports": [ "ring3", "ring4", "ring5" ],
      "tx_ports": [ "nic0" ]
    },
    {　// SPPコンポーネント設定例(forward)
      "command": "component",
      "core_id": "6",
      "type": "forward",
      "rx_ports": [ "ring0" ],
      "tx_ports": [ "vhost0" ]
    },
    {　// SPPコンポーネント設定削除例(処理無しに変更)
      "command": "component",
      "core_id": "8",
      "type": "none"
    },
    {　// Classifierテーブル追加例(MACアドレス追加)
      "command": "classifier_table",
      "type" "mac", 
      "value": "00:11:22:33:44:55",
      "port": "ring0"
    },
    {　// Classifierテーブル削除例(MACアドレス削除)
      "command": "classifier_table",
      "type": "mac",
      "value": "00:11:22:33:44:55",
      "port": "unuse"
    },
    {　// 設定反映例
      "command": "flush"
    },
    {　// 転送開始例
      "command": "forward"
    },
    {　// 転送停止令
      "command": "stop"
    }
  ]
}

　・応答(sppプロセス⇒コマンドライブラリ)
　　指示で来たコマンドの数分、成否を返却する。
　　※否となった設定がある場合は、その時点で処理を停止し、1度に送信されたコマンドの分の設定は全て切り戻す予定。
　　　否となった設定には、"error"パラメータを追加し、エラー内容の文字列を返却する。
{
  "results": [　// 処理を共通にする為、1つの結果を返却する場合でも配列で返却。
    {　// ポート追加の結果例
      "result": "success"
    },
    {　// SPPコンポーネント設定の結果例(classifier) ※否となった場合の例
      "result": "error",
      "error_details": {"message": "xxxx error occur"}
    },
    {　// SPPコンポーネント設定の結果例(merge)
      "result": "invalid",
    },
...
  ]
}

・プロセス番号取得例
　・指示(コマンドライブラリ⇒sppプロセス)
{
  "commands": [
    {
      "command": "process"　　　　　　　　　 // プロセス番号取得
    }
  }
}
　・応答(sppプロセス⇒コマンドライブラリ)
{
  "results": [
    {
      "result": "success"
    }
  ],
  "process": 0　　　　　　　　　　　　　　　 // プロセス番号(0起算)
}

・状態取得例
　・指示(コマンドライブラリ⇒sppプロセス)
{
  "commands": [
    {
      "command": "status"　　　　　　　　　　// 状態取得
    }
  }
}
　・応答(sppプロセス⇒コマンドライブラリ)
　　コアの状態の"停止中"は、SPPプロセスの起動中にコマンドを投入した場合、設定されている可能性がある。
{
  "results": [
    {
      "result": "success"
    }
  ],
  "info": {
    "process": 0,　　　　　　　　　　　　　　// プロセス番号
    "num_nic": 2,　　　　　　　　　　　　　　// プロセス内で使用可能なNICの数(Primaryプロセスで設定した数)
    "nic": [ 0, 1 ],　　　　　　　　　　　　 // プロセス内で使用可能なNICのポート番号(NICは全プロセス共通でDPDKの初期化時に0〜NICの数分設定される)
    "num_vhost": 3,　　　　　　　　　　　　　// プロセス内で使用可能なVHOSTの数(addコマンドで登録した数)
    "vhost": [ 0, 1, 2 ],　　　　　　　　　　// プロセス内で使用可能なVHOSTのポート番号(addコマンドで登録したvhostの番号)
    "num_ring": 6,　　　　　　　　　　　　　 // プロセス内で使用可能なRINGの数(addコマンドで登録した数)
    "ring": [ 0, 1, 2, 3, 4, 5 ],　　　　　　// プロセス内で使用可能なRINGのポート番号(addコマンドで登録したringの番号)
    "core": [
      {
        "core": 2,　　　　　　　　　　　　　 // コア番号
        "type": "classifier",　　　　　　　　// SPPコンポーネント
        "status": "forward",　　　　　　　　 // コアの状態(空転中／転送中が返却される予定。)
        "rx": [ "nic0" ],　　　　　　　　　　// 受信ポート情報
        "tx": [ "ring0", "ring1", "ring2" ]　// 送信ポート情報
      },
      {
        "core": 4,　　　　　　　　　　　　　 // コア番号
        "type": "merge",　　　　　　　　　　 // SPPコンポーネント
        "status": "idle",　　　　　　　　　　// コアの状態(空転中／転送中が返却される予定。)
        "rx": [ "ring3", "ring4", "ring5" ], // 受信ポート情報
        "tx": [ "nic0" ]　　　　　　　　　　 // 送信ポート情報
      },
      {
        "core": 6,　　　　　　　　　　　　　 // コア番号
        "type": "forward",　　　　　　　　　 // SPPコンポーネント
        "status": "idle",　　　　　　　　　　// コアの状態(空転中／転送中が返却される予定。)
        "rx": [ "ring0" ],　　　　　　　　　 // 受信ポート情報
        "tx": [ "vhost0" ]　　　　　　　　　 // 送信ポート情報
      },
      {
        "core": 8,　　　　　　　　　　　　　 // コア番号
        "type": "none",　　　　　　　　　　　// SPPコンポーネント
        "status": "idle",　　　　　　　　　　// コアの状態(空転中／転送中が返却される予定。)
        "rx": [],　　　　　　　　　　　　　　// 受信ポート情報
        "tx": []　　　　　　　　　　　　　　 // 送信ポート情報
      }
    ]
  }
}


[[参考]]
・SPPコンポーネントの設定変更時のIF例
　SPPコンポーネントの設定を変更する際に、どの様なIFを送信するかの例を記載する。
　※配列は順番が守られる為、上から順番に処理される為、先に空転状態にする設定を追加する。
　　まとめた形式で記載しているが、順番が守られていれば、コマンド1つずつ送信する事も可能。

　・SPPコンポーネントを変更する場合の例
{
  "commands": [
    {　// 設定済みのコアのSPPコンポーネントを変更する場合は、一度処理の無い状態へ戻す。 ※処理の無い状態へ戻した時点での設定反映は無くても問題なし。
      "command": "component",
      "core_id": "6",
      "type": "none"
    },
    {　// SPPコンポーネント設定例(classifier)
      "command": "component",
      "core_id": "6",
      "type": "classifier",
      "rx_ports": [ "nic1" ],
      "tx_ports": [ "ring6", "ring7", "ring8" ]
    },
    {　// 設定反映例
      "command": "flush",
    }
  }
}

　・ポートの追加を行う場合の例
{
  "commands": [
    {　// 設定済みのコアのSPPコンポーネントを変更する場合は、一度処理の無い状態へ戻す。 ※処理の無い状態へ戻した時点での設定反映は無くても問題なし。
      "command": "component",
      "core_id": "6",
      "type": "none"
    },
    {　// ポートの追加
      "command": "component",
      "core_id": "6",
      "type": "classifier",
      "rx_ports": [ "nic1" ],
      "tx_ports": [ "ring6", "ring7", "ring8", "ring9" ]
    },
    {　// 設定反映例
      "command": "flush",
    }
  }
}

・ClassifierテーブルのMACアドレスに対応するポート変更時のIF例
　Classifierテーブルに既に設定しているMACアドレスに対して、送信先のポートを変更する場合に、どの様なIFを送信するかの例を記載する。
　・MACアドレスに対応する送信先ポートを変更する場合の例
{
  "commands": [
    {　// 設定済みのMACアドレスの設定を変更する場合は、一度削除する。※MACアドレス削除時点での設定反映は無くても問題なし。
      "command": "classifier_table",
      "type": "mac",
      "value": "00:11:22:33:44:55",
      "port": "unuse"
    },
    {　// Classifierテーブルに変更後のデータで追加
      "command": "classifier_table",
      "type" "mac", 
      "value": "00:11:22:33:44:55",
      "port": "ring1"
    },
    {　// 設定反映例
      "command": "flush",
    }
  }
}
