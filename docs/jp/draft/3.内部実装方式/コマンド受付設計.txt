■目的

	* SPP-VF起動中にSPPコントローラ(spp.py、SPP-AGENT)からの要求を受付可能とする。
		※sprint4時点ではSPP-AGENTを対象。spp.pyは非対応。


■前提条件

	* spp.pyからの既存コマンド形式は非許容。
	  受信した場合、SPP-AGENTからの許容コマンドを受信し、処理した際にパースエラーが発生。

	* 数制限
	
		* コマンド数	32

	* 対象コマンドは以下。
	  ※パース／バリデーションに影響があるため本機能でも前提条件として記載。

		* プロセス識別子取得（process）
		* MACアドレス振分設定（classifier_table）
		* 設定反映（flush）

	* コマンド要求受信→制御機能での処理→コマンド応答送信を一連で行う予定。
	  また、SPP-AGENTからはコマンド応答を待たずに要求発行はしないでもらう想定。
	  そのため、コマンド要求のすれ違いや同時処理は起こらない想定。

	* ソケット処理において、監視対象ソケットは1つであり今後増加予定もないため、
	  今sprintではepollなどによる監視多重化は行わない予定。


■概要

	* SPPコントローラとのTCPコネクション確立

		コマンドラインオプションで指定されたSPPコントローラのIPアドレス／ポート番号に対して
		TCPクライアントとして接続を行う。

	* SPPコントローラからのメッセージ受信

		確立されたTCPコネクションからのメッセージ受信を行う。
		非ブロッキングI/Oを使用する。
		recv関数でエラーが発生した場合、既存コネクションを破棄、コネクション再確立を行う。

		受信データに対して“{”と“}”の数をそれぞれカウントし、同数となった場合に1メッセージとしてパース処理を行う。

		メッセージバッファは動的サイズとする。
			今後のコマンド追加により必要文字数が流動するため。

	* SPPコントローラへのメッセージ送信

		確立されたTCPコネクションからコマンド実行結果の送信を行う。
		非ブロッキングI/Oを使用する。
		send関数でエラーが発生した場合、既存コネクションを破棄、コネクション再確立を行う。

		アプリケーションレベルでの再送は行わない。

	* 受信したメッセージをパースする。

		SPPコントローラから受信したメッセージをパースする。
		フォーマットはsprint3のコマンドIF形式の仕様検討パターン3(＃217)。
		対応コマンドは前提条件参照。

	* 受信したメッセージのバリデーション

		JSON形式のパースはjansson関数を使用する。
		JSON形式のパース自体に失敗した場合、以下をレスポンスとしてSPPコントローラへ送信する。

			{
			  "results": [
			    {
			      "result": "format error",
			      "error_details": {"message": "bad message format"}
			    }
			  ]
			}

		JSON形式のパース成功後、各コマンド単位でバリデーションを行う。
		コマンド間バリデーションは行わない。
		バリデーション内容については後述。

		コマンド単位バリデーションで異常となった場合、SPPコントローラへレスポンスを送信する。
		レスポンスは、正常なコマンドも処理は実行していないため未処理として“invalid”で列挙し、
		異常があったコマンドを異常として設定する。
		異常があったコマンド以降は未チェック／未処理として“invalid”を設定する。

		例）5つのコマンドがあり、1、2番目のコマンドは正常、3番目のコマンドが異常だった場合。
			1、2番目のコマンドは未処理が設定され、3番目のコマンドには異常とメッセージが設定される。
			3番目で異常となったため、4番目以降のコマンドは未処理を設定する。

			{
			  "results": [
			    {
			      "result": "invalid"
			    },
			    {
			      "result": "invalid"
			    },
			    {
			      "result": "error",
			      "error_details": {"message": "hogehogehoge"}
			    }
			    {
			      "result": "invalid"
			    },
			    {
			      "result": "invalid"
			    }
			  ]
			}


■外部関数イメージ

	制御機能部から実行される想定。

	* 初期化

		INPUT
			* コマンドラインオプションなりから取得したSPPコントローラの接続先情報

	* コマンド処理

		以下を行う。
			* コマンド要求の受信（コネクション確立／メッセージ受信／パース／バリデーション）
			* 制御機能APIを使用した管理データ更新
			* コマンド応答の送信

		main関数のmainループで毎周実施を想定。

		ブロッキングし続けず、以下の場合に返る予定。
			* 受信メッセージサイズが0
			* 1メッセージ処理（要求受信〜応答送信）が完了


■バリデーション内容

	チェック対象
		* コマンド単体内で完結する内容。コマンド間におよぶ整合性はチェックしない
		* 不要なパラメータの有無はチェックしない。無視する。

	コマンド内チェック
		* process
		* flush
			* パラメータがないためコマンド内チェックなし。

		* classifier_table
			* 必須パラメータがあること（type／value／port）
			* 各必須パラメータの型が想定とおりであること
			* 各必須パラメータの値が仕様とおりであること
				|	type	|	“mac”							|
				|	value	|	MACアドレス文字列形式			|
				|	port	|	IF種別＋番号、または“unuse”	|


■エラーメッセージ

	バリデーションエラー時のメッセージ

		|	メッセージ形式誤り	|	bad message format								|
		|	未認識コマンド		|	unknown command(xxx)		※xxxは指定された値	|
		|	必須値なし			|	not enough parameter(xxx)	※xxxは値名			|
		|	値の型誤り			|	bad value type(xxx)			※xxxは値名			|
		|	値の値誤り			|	bad value(xxx)				※xxxは値名			|


■既存流用

	jansson使用、および値確認のための機能をコンフィグから流用。
	なお、公開関数となるため、関数名の修正が必要。

	int
	config_get_int_value(const json_t *obj, const char *path, int *value)

	static int
	config_get_str_value(const json_t *obj, const char *path, char *value)

	static int
	config_get_if_info(const char *port, enum port_type *if_type, int *if_no)

	static int64_t
	config_change_mac_str_to_int64(const char *mac)

	static enum spp_core_type
	config_change_core_type(const char *core_type)

