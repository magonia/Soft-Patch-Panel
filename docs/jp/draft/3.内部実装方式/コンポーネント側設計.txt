■目的

	* SPP-VF起動中にSPPコントローラ(spp.py、SPP-AGENT)からのMAC振分情報を設定可能とする。
		※sprint4時点ではSPP-AGENTを対象。spp.pyは非対応。

	MAC振分情報： MACアドレスと転送先ポート(nic／ring／vhost)のペア
		※sprint4では転送先ポートはringでの検証を予定。


■前提条件

	* MACアドレス振分コンポーネントの更新は非マルチスレッドセーフ。


■概要

	* 振分テーブル更新

		テーブル更新はmainスレッドからclassifierコンポーネント提供の更新APIを起動してもらう。
			※更新処理時間をmainスレッドの方で払って貰う。
			  パケット処理の停止時間を短くするため、
			  パケット処理スレッドでのテーブル更新処理は行わない。

		振分テーブルは2つ持ち、各々を参照用と更新用と切り替えて使用する。
		パケット処理は参照用に指定されている方を使用する。

		振分テーブルを配列で持ち、参照用インデックスの変更により切り替える。
			※現行設計としては参照用インデックスの更新は1スレッドからのみ実施のため、
			  排他やアトミックは使用しない想定。

		振分テーブルの更新を検知した場合、以下の処理を行う。

			更新スレッド： 振分テーブルの更新を行うスレッド。パケット処理スレッド外。mainスレッド想定。
			参照スレッド： パケット処理スレッド。

			① 更新スレッド： 更新用振分テーブルをクリア。
			② 更新スレッド： 更新用振分テーブルへ制御機能から渡された情報を登録。
			③ 更新スレッド： 参照用インデックスに更新用インデックス値を設定。

			＜＜＜次周期からパケット処理は新情報で動作する＞＞＞
				※参照スレッドは、
				  パケット処理ループの先頭でその周期で使用する振分テーブルのインデックスを
				  ローカル変数に保持。
				  それにより、その周期中に参照用インデックスが変更されたとしても、
				  一貫した振分テーブルで処理を行えるようにする。
				  (＝新振分テーブルが参照されるのは次周期から)

			④ 更新スレッド： 参照用／更新用インデックスが異値になるまで待つ。

			⑤ 参照スレッド： 参照用／更新用インデックスが同値の場合、
				              更新用インデックスを参照用インデックス値ではないインデックスに設定。

			⑥ 更新スレッド： 参照用／更新用インデックスが異値になったため待ち解除。
							  classifierコンポーネント更新APIが終了し、呼び出し元へ返る。


	* 未送信パケットの扱い整理

		* 現実装
			1回の受信パケット全てが同じ転送先ポートに振り分けられない可能性があるため、
			送信先ポート毎のパケットバッファに保持、
			バースト数に達するか一定周期でバースト送信を行っている。

		* 課題
			転送先ポートの接続先VM（≒MACアドレス）が変更になったとしても、
			① 未送信パケットはその転送先ポートのパケットバッファに残っており、
			   新接続先VMへ送信される。
			② 転送先の挿げ替え（ex.VMの接続先vhost変更）があった場合、
			   既にパケットバッファに保持されているパケットは新転送先へは転送されない。

		* 結論
			①についてはVMにて宛先MACアドレスが自身のものではないため破棄される想定。
			②についてはプロトコルの再送機能などでリカバリを期待。
			  送信元から見ればパケットロスと同様と考えますので、
			  そういったことに対して送信元で何がしかの対策がされていると考えます。

	* 宛先MACアドレスが未登録の場合

		sprint1実装踏襲で破棄とします。
		破棄ログは出力しない。

			※sprint1では検証サイトなどの構成が固定となっている環境を想定していたため、
			  設定ミス検知のために破棄パケットをログ出力していました。
			  今環境では構成が変動であり、また、起動時のデフォルトとしてMACアドレスが登録されていないため、
			  ログ出力ありの場合にログが出力されすぎる可能性があり。

	* L2ブロードキャスト／マルチキャストアドレスについて

		sprint1実装踏襲で意識せず、ユニキャストアドレスと同様に扱う。


■外部関数イメージ

	* コンポーネント更新

		振分テーブルの更新を行う。
			※将来的にはポートなどの更新も実施を予定。


