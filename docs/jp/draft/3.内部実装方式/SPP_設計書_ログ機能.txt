■目的

	* スレッド間キュー（ring）の滞留具合を測定出来るようにする。
		nic／vhostは対象外。


■参考

	* dpdk“librte_latencystats”
		ガイド： http://dpdk.org/doc/guides/prog_guide/metrics_lib.html#latency-statistics-library
		ソース： dpdk-17.05\lib\librte_latencystats


■概要

	* キュー在留時間の計算

		ringへの書き込み時にmbuf::timestampにrte_get_tsc_cycles関数で取得したtsc値を設定し、
		ringからの読み込み時にその値と現在のtsc値との差分を在留時間とする。

	* キュー在留時間の統計の保持

		在留時間を範囲で分けカウントする。
		カウンタはグローバル変数で保持。		★グローバル変数は必ずメモリ参照が発生する？？？
　
			0 ns				※tsc値の精度が悪いと全て0になる場合も考えられる。
			〜				※1ns刻み
			99ns			
			100ns以上

		84byteパケットで10Gbpsを1スレッドで実現する場合、
		1パケットあたりの処理時間は67.2nsであり、
		84byteパケットで40Gbpsを1スレッドで実現する場合、
		1パケットあたりの処理時間は16.8nsのため、
		上記範囲の統計を取れば在留時間が許容できるか判断できるかと考えます。

	* キュー在留時間の統計の表示

		モニタリングスレッドを別途起動し、一定周期で標準出力へ前述のカウントを表示。
		表示はring毎に判るようにする。

		スプリント1ではメインスレッドで出力

	* サンプリング間隔の設定

		全てのmbufに対して前述の処理を実行するとパフォーマンス劣化の可能性が高いため、
		対象mbufは限定する。

		基本的にmbuf処理はバルクで実施されると考える。
		前回バルク処理からサンプリング間隔以上経過していた場合、
		当該バルク処理のmbufに対して測定処理を行う。
		サンプリング間隔未満の場合はmbuf::timestampへの設定処理は行わない。

	* 処理抑止

		本機能用のifdefスイッチを用意し、
		OFFにしたい場合はコンパイル時に何も行わない処理になるようにする。

	* mbufのtimestampについて

		dpdk-17.05のソースをgrepし、
		mbuf::timestampを入れ物として使用しているのは“librte_latencystats”のみと確認。
		（".timestamp"、"->timestamp"で検索）


■前提条件

	* librte_latencystatsを使用しない。

		mbufの使用領域が競合するため。

		librte_latencystatsはethデバイス用の遅延統計情報ライブラリのため今回は不使用。
			ibrte_latencystatsはethデバイス用という根拠は、
			rte_eth_dev_info_getで取得したものに対して処理を行っているため。

	* CPUが“Invariant TSC”を具備していること。

		Invariant TSCを具備していない場合、tsc値はコア毎に多少なりとも異なる。
		今開発のringへの書き込み／読み込みは別スレッド＝別コアのため、
		Invariant TSCに対応していないCPUでは在留時間が正しく計算できない。

		ただし、Invariant TSCは定格で刻まれるため、最大クロックとは限らない。

		参考
			http://www.02.246.ne.jp/~torutk/cxx/clock/cpucounter.html
			http://d.hatena.ne.jp/torutk/20120922/p1
			http://www.valinux.co.jp/technologylibrary/document/linuxkernel/timer0003/


■外部関数イメージ

	* 初期化

		プロセス開始時に呼ばれる想定。

		自プロセス使用のring分だけ統計カウントを作成し、初期化する。

	* timestamp設定

		ringへの書き込み時に呼ばれる想定。

		書き込むmbufのリストを引数にとる。

		サンプリング間隔を計算し、前回からサンプリング間隔以上経過していれば
		引数で渡された各mbufのtimetampにtsc値を設定する。
		サンプリング間隔未満であれば何もしない。

	* 統計情報計算

		ringからの読み取り時に呼ばれる想定。

		読み取られたmbufのリストを引数にとる。

		mbuf::timestampを確認し、0でなければtsc値が設定されている判断し、
		差分を計算、計上先カウントを決定しカウントする。

	* 統計情報取得

		モニタリングスレッドから呼ばれる想定。

		統計情報を返す。
