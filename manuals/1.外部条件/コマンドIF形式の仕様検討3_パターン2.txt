■パターン2
Json形式を使用する為、プロセス起動時に使用するコンフィグに近い形式とする。
ポート追加で設定していた内容は、vfsの記載で使用しているポートが未設定であれば、自動で追加する。

[[メリット／デメリット]]
※基本はパターン1とは逆になる。
・メリット
　・データにそれぞれパラメータ名称が設定されている為、データの内容が分かり易い。
　・同じ設定をまとめて記載する事が可能。

・デメリット
　・パラメータ数分の処理が必要となり、ソース修正量が多い。
　・処理はsppプロセス内で固定(add_ports⇒vfs⇒classifier_table⇒flush⇒forward)で変更できず、同じ設定を複数回記載できない。
　　(例えば、forward:"stop"⇒vfs変更⇒forward:"start"などが行えない。)

[[Json形式での記述例]]
・設定例
　・指示(コマンドライブラリ⇒sppプロセス)
　　設定は複数まとめてでも、個々に送信でも可能。(未記載のデータは変更しない予定。)
　　※add_portsの設定は冗長な感じがするが、spp_nfvでaddコマンド相当を残す為に一応記載している。不要なら削除予定。
{
  "add_ports": [　// ポート追加例
    "vhost0",
    "vhost1",
    "vhost2",
    "ring0",
    "ring1",
    "ring2",
    "ring3",
    "ring4",
    "ring5"
  ],
  "vfs": [
    {　// SPPコンポーネント設定例(classifier)
      "core": 2,
      "type": "classifier",
      "rx_port": [ "nic0" ],
      "tx_port": [ "ring0", "ring1", "ring2" ]
    },
    {　// SPPコンポーネント設定例(merge)
      "core": "4",
      "type": "merge",
      "rx_port": [ "ring3", "ring4", "ring5" ]
      "tx_port": [ "nic0" ]
    },
    {　// SPPコンポーネント設定例(forward)
      "core": "6",
      "type": "forward",
      "rx_port": [ "ring0" ]
      "tx_port": [ "vhost0" ]
    },
    {　// SPPコンポーネント設定削除例(処理無しに変更)
      "core": 8,
      "type": "none"
    }
  ],
  "classifier_table": [
    {　// Classifierテーブル追加例(MACアドレス追加)
      "type": "mac",
      "value": "00:11:22:33:44:55",
      "port": "ring0"
    },
    {　// Classifierテーブル削除例(MACアドレス削除)
      "type": "mac",
      "value": "00:11:22:33:44:55",
      "port": "unuse"
    }
  },
  "flush": "on",　　　// 設定値は"on" or "off"
  "forward": "start"　// 設定値は"forward" or "stop"
}
　・応答(sppプロセス⇒コマンドライブラリ)
　　設定は一回の送信で一括りとして、成否のみ返却となる。
{
  "result": 0,　　　　　　　　　　　　　　　 // 成(0)否(-1)を返却
}
　　※否となった設定がある場合は、その時点で処理を停止し、1度に送信されたコマンドの分の設定は全て切り戻す予定。
　　　否となった設定には、"error"パラメータを追加し、エラー内容の文字列を返却する。
{
  "result": -1,　　　　　　　　　　　　　　　// 成(0)否(-1)を返却
  "error": "error"　　　　　　　　　　　　　 // 否があった場合のエラー内容を文字列で返却
}

・プロセス番号取得例
　・指示(コマンドライブラリ⇒sppプロセス)
{
  "get": "process"　　　　　　　　　　　　　 // プロセス番号取得
}
　・応答(sppプロセス⇒コマンドライブラリ)
{
  "result": 0,　　　　　　　　　　　　　　　 // 成(0)否(-1)を返却
  "process": 0　　　　　　　　　　　　　　　 // プロセス番号(0起算)
}

・状態取得例
　・指示(コマンドライブラリ⇒sppプロセス)
{
  "get": "status"　　　　　　　　　　　　　　// 状態取得
}
　・応答(sppプロセス⇒コマンドライブラリ)
　　※応答の"info"はパターン1と変更なし。
{
  "result": 0,　　　　　　　　　　　　　　　 // 成(0)否(-1)を返却
  "info": {
    "process": 0,　　　　　　　　　　　　　　// プロセス番号
    "num_nic": 2,　　　　　　　　　　　　　　// プロセス内で使用可能なNICの数(Primaryプロセスで設定した数)
    "nic": [ 0, 1 ],　　　　　　　　　　　　 // プロセス内で使用可能なNICのポート番号(NICは全プロセス共通でDPDKの初期化時に0〜NICの数分設定される)
    "num_vhost": 3,　　　　　　　　　　　　　// プロセス内で使用可能なVHOSTの数(addコマンドで登録した数)
    "vhost": [ 0, 1, 2 ],　　　　　　　　　　// プロセス内で使用可能なVHOSTのポート番号(addコマンドで登録したvhostの番号)
    "num_ring": 6,　　　　　　　　　　　　　 // プロセス内で使用可能なRINGの数(addコマンドで登録した数)
    "ring": [ 0, 1, 2, 3, 4, 5 ],　　　　　　// プロセス内で使用可能なRINGのポート番号(addコマンドで登録したringの番号)
    "core": [
      {
        "core": 2,　　　　　　　　　　　　　 // コア番号
        "type": "classifier",　　　　　　　　// SPPコンポーネント
        "status": "forward",　　　　　　　　 // コアの状態(停止中／空転中／転送中が返却される予定。)
        "rx": [ "nic0" ],　　　　　　　　　　// 受信ポート情報
        "tx": [ "ring0", "ring1", "ring2" ]　// 送信ポート情報
      },
      {
        "core": 4,　　　　　　　　　　　　　 // コア番号
        "type": "merge",　　　　　　　　　　 // SPPコンポーネント
        "status": "idle",　　　　　　　　　　// コアの状態(停止中／空転中／転送中が返却される予定。)
        "rx": [ "ring3", "ring4", "ring5" ], // 受信ポート情報
        "tx": [ "nic0" ]　　　　　　　　　　 // 送信ポート情報
      },
      {
        "core": 6,　　　　　　　　　　　　　 // コア番号
        "type": "forward",　　　　　　　　　 // SPPコンポーネント
        "status": "idle",　　　　　　　　　　// コアの状態(停止中／空転中／転送中が返却される予定。)
        "rx": [ "ring0" ],　　　　　　　　　 // 受信ポート情報
        "tx": [ "vhost0" ]　　　　　　　　　 // 送信ポート情報
      },
      {
        "core": 8,　　　　　　　　　　　　　 // コア番号
        "type": "none",　　　　　　　　　　　// SPPコンポーネント
        "status": "idle",　　　　　　　　　　// コアの状態(停止中／空転中／転送中が返却される予定。)
        "rx": [],　　　　　　　　　　　　　　// 受信ポート情報
        "tx": []　　　　　　　　　　　　　　 // 送信ポート情報
      }
    ]
  }
}

[[参考]]
・SPPコンポーネントの設定変更時のIF例
　SPPコンポーネントの設定を変更する際に、どの様なIFを送信するかの例を記載する。
　※配列は順番が守られる為、上から順番に処理される為、先に空転状態にする設定を追加する。
　　まとめた形式で記載しているが、順番が守られていれば、コマンド1つずつ送信する事も可能。

　・SPPコンポーネントを変更する場合の例
{
  "vfs": [
    {　// 設定済みのコアのSPPコンポーネントを変更する場合は、一度処理の無い状態へ戻す。 ※処理の無い状態へ戻した時点での設定反映は無くても問題なし。
      "core": 6,
      "type": "none"
    },
    {　// SPPコンポーネント設定例(classifier)
      "core": 6,
      "type": "classifier",
      "rx_port": [ "nic1" ],
      "tx_port": [ "ring6", "ring7", "ring8" ]
    }
  },
  "flush": "on"
}

　・ポートの追加を行う場合の例
{
  "vfs": [
    {　// 設定済みのコアのSPPコンポーネントを変更する場合は、一度処理の無い状態へ戻す。 ※処理の無い状態へ戻した時点での設定反映は無くても問題なし。
      "core": 6,
      "type": "none"
    },
    {　// SPPコンポーネント設定例(classifier)
      "core": 6,
      "type": "classifier",
      "rx_port": [ "nic1" ],
      "tx_port": [ "ring6", "ring7", "ring8", "ring9" ]
    }
  },
  "flush": "on"
}

・ClassifierテーブルのMACアドレスに対応するポート変更時のIF例
　Classifierテーブルに既に設定しているMACアドレスに対して、送信先のポートを変更する場合に、どの様なIFを送信するかの例を記載する。
　・MACアドレスに対応する送信先ポートを変更する場合の例
{
  "classifier_table": [
    {　// 設定済みのMACアドレスの設定を変更する場合は、一度削除する。※MACアドレス削除時点での設定反映は無くても問題なし。
      "type": "mac",
      "value": "00:11:22:33:44:55",
      "port": "unuse"
    },
    {　// Classifierテーブルに変更後のデータで追加
      "type": "mac",
      "value": "00:11:22:33:44:55",
      "port": "ring1"
    }
  },
  "flush": "on"
}
