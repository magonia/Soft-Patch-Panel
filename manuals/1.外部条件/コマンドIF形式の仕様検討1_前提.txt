【前提】
sppプロセス(spp_primary／spp_nfv／spp_vfなど)と通信するライブラリ(以降、コマンドライブラリ)では、母体の動作踏襲し、
sppプロセスから接続されたタイミングでプロセス番号の取得を行い、その番号によりsppプロセスとのコネクションを管理する。
コマンドライブラリのAPIを起動してコマンドを送信したい場合は、APIのパラメータで送信したいプロセス番号を指定してもらい、
その値により管理しているコネクションから送信先を決定する。

打ち合わせで展開した資料には、経路設定(patch)を残していたが、
spp_nfv側も変更を行う為、経路設定(patch)はSPPコンポーネント設定(component)へ含める方向とする。
(spp_nfvはSPPコンポーネントのFWDとして設定する。)


【制限事項】
・現在は、1コア上で複数のSPPコンポーネントを動作する事は許容しない。
・SPPコンポーネント設定(component)の設定を変更する場合には、新しい設定の前に一度空転状態("type":"idle")に変更する。
　(空転状態以外のコアへは、空転状態へ変更する設定以外はエラーとなる。)
・Classifierテーブル追加(classifier_table)の設定を変更する場合には、新しい設定の前に未使用状態(unuse)を設定する。
　(未使用状態となると削除される。削除せずに既にあるKeyの情報を送信するとエラーとなる。)
・転送開始と転送停止以外の設定は、設定反映(flush)が送信されるまで、コア上のSPPコンポーネントへは反映されない。(変更前の設定が維持される。)
　設定反映(flush)が行われると設定変更があるコアは一時的に転送を停止し、それまでに送信された設定を反映された後にパケット転送が再開する。


【Json形式で送信する場合の記載方式】
実際のJson形式での記載は、2パターン検討した為、別ファイルで記載する。
下記は、Json形式でやりとりを行う必要があるデータとなる。

[[コマンドライブラリ⇔sppプロセス間で必要な情報]]
・プロセス番号取得(process)
　プロセス番号を取得する。現状の使用目的はコネクションの管理番号となる。
　※コマンドライブラリが自主的に使用する。呼び元(spp.pyやspp-agentなど)にはIFを提供しない。
　・入力パラメータ：なし
　・出力パラメータ：プロセス番号

・状態取得(status)
　プロセス内の情報を取得する。
　・入力パラメータ：なし
　・出力パラメータ：プロセス番号
　・出力パラメータ：プロセス内で使用可能なNICの数(Primaryプロセスで設定した数)
　・出力パラメータ：プロセス内で使用可能なNICのポート番号(NICは全プロセス共通でDPDKの初期化時に0〜NICの数分設定される)
　・出力パラメータ：プロセス内で使用可能なVHOSTの数(addコマンドで登録した数)
　・出力パラメータ：プロセス内で使用可能なVHOSTのポート番号(addコマンドで登録したvhostの番号)
　・出力パラメータ：プロセス内で使用可能なRINGの数(addコマンドで登録した数)
　・出力パラメータ：プロセス内で使用可能なRINGのポート番号(addコマンドで登録したringの番号)
　・出力パラメータ：各コアのコア番号
　・出力パラメータ：各コアの処理中のsppコンポーネント種別
　・出力パラメータ：各コアの状態
　・出力パラメータ：各コアの使用中の受信ポート
　・出力パラメータ：各コアの使用中の送信ポート
　・出力パラメータ：Classifierで使用するテーブルの情報

・ポート追加(add)
　プロセスで入力パラメータで指定したポートを使用可能にする。
　※物理NICはプロセス起動時に使用可能となる為、提供IFでは設定しない。
　1プロセスで使用可能なポートの上限は、NIC/VHOST/RINGを合わせて32個までとなっている。
　上限の32の値はDPDKで設定されており、254個まで拡張可能。
　※例えば、プロセス0でNICを2個、VHOSTを2個、RINGを28個使用している場合、プロセス0ではそれ以上追加できません。
　　上限はプロセス毎のため、プロセス1は別に32個使用可能です。
　・入力パラメータ：追加するポート情報(nic0など、種別+種別毎にユニークとなる番号)
　・出力パラメータ：成功／失敗

・ポート削除(del)　※提供しない予定。
　※物理NIC／vhostは削除方法が不明で、削除した場合の保証ができない。(DPDK提供のsppにも処理なし。)
　※物理NIC／ringは他のプロセスなどからアクセスが可能な為、削除する必要がない。

・SPPコンポーネント設定(component) ※新規
　指定したコアで動作させるSPPコンポーネントと、そのSPPコンポーネントで使用するポートを設定する。
　※SPPコンポーネントによっては、使用するポートの数が違う為、下記送受信のポート情報は配列で指定。
　※ポート情報に指定できるのはポート追加(add)を実施済みのポートのみとなる。
　・入力パラメータ：設定したいコア番号
　・入力パラメータ：SPPコンポーネント(forward/merge/classifierなど)の種別 or 処理無し(none)
　・入力パラメータ：受信ポート情報(nic0など、種別+種別毎にユニークとなる番号)
　・入力パラメータ：送信ポート情報(nic0など、種別+種別毎にユニークとなる番号)
　・出力パラメータ：成功／失敗

・経路設定(patch)
　SPPコンポーネント毎にポート数が違う為、spp_nfv側も改修するのであれば、
　母体のコマンドでは使用し辛い事から使用しない方向で考えている。

・転送開始(forward)／転送停止(stop)
　1プロセス内の全てのSPPコンポーネントに対して、SPPコンポーネント毎の処理(パケットの転送など)の開始or停止を行う。
　・入力パラメータ：なし
　・出力パラメータ：成功／失敗

・設定反映(flush) ※新規 ※要不要の判断が必要
　他IF後に本IFを起動する事で、1プロセス内で他IFで設定された内容をSPPコンポーネントへ設定を反映する。
　※複数のSPPコンポーネントでNIC⇔VM間のパケット転送を行っていた場合に、
　　設定を個々に反映してしまうと問題となる可能性がある為、本IFの提供が必要となる可能性を考えている。
　　ただし、本IFを提供した場合は、1つのIFのみの場合でも、本IFを起動しないと設定は反映されない。
　※パターン1の場合、1回のJson形式で複数の指示が行える為、送信単位で動作を行う様な仕様も可能。
　・入力パラメータ：なし
　・出力パラメータ：成功／失敗

・Classifierテーブル追加(classifier_table) ※新規
　Classifierで振り分けに使用するテーブルへ追加する。
　どのClassifierかを指定せず、ポート情報で指定したポートを使用しているClassifierへ設定する。
　・入力パラメータ：種別(macなど)
　・入力パラメータ：設定値(AA:BB:CC:DD:EE:FF)
　・入力パラメータ：ポート情報(nic0など、種別+種別毎の通し番号が分かる情報) or 未使用(テーブルに情報があった場合、削除)
　・出力パラメータ：成功／失敗
