
================================================================================
■概要
================================================================================

パターン1では使用していないSPPコンポーネントもCPUコアリソースを保持しており、
また、SPP内部の配線が静的なため、
VA様PPTの巻末「その次のステップ（vhost間をringで接続）」などに対応できない。

本パターンではSPP内部の配線も動的に行うことで、
vhost間の動的配線や、不要コンポーネントのCPUコア保持を改善する。

nic／ring／vhostについては静的確保とする。
（SPPプライマリの改修はなるべく避けたい）

物理NICに対応するclassifier／merge／forward(vhost)は1プロセス。
（分けてもよいがその分コンフィグファイルの作成やプロセス管理が必要となり、
  SPP-AGENTのコストが高くなるためプロセス構成は簡便化）


================================================================================
■前提
================================================================================

○VA様PPTより
・物理NIC、vhost数は、コンフィグで指定。静的に割り当て。
・vhostと物理NICとの対応は固定。物理NIC毎のvhost数は、コンフィグ。←静的と認識
・物理NIC、vhostの動的追加、削除は、なし。
・SPP-VFは、最初に一回起動して、そのままの想定。

○その他
・物理NIC毎にSPP-VFを分ける。
・SPP-AGENTは物理NICとSPP-VFプロセスの対応を管理し、適切なSPP-VFプロセスへ
  要求を送信する想定。
・vhostのRX/TX両方を使用するために同一プロセスである必要があるため、
  物理NICに対応するclassifier／merge／forward(vhost)は1プロセスとする。
  （classifier／mergeはプロセスを分けてもよいが、構成簡便化のためまとめる）


================================================================================
■静的決定
================================================================================

・spp_primary、spp_vfで使用するCPUコアセット。


================================================================================
■動的決定
================================================================================

・振分MACアドレステーブル要素（MACアドレスと送信先のペア）
・SPPコンポーネントに割り当てるCPUコア番号。
・SPPコンポーネントの配置、および配線（ringなどのでの接続）


================================================================================
■記載上の注意
================================================================================

・説明上、JSON説明を“//”にてコメント風に記載。
  （JSONフォーマットではないのでコピペ注意）




＜＜以下手順イメージ＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞

================================================================================
■コンフィグファイル用意 ＠SPP-HOSTマシン
================================================================================

※sprint3時点でのフォーマットをベースにしていますが、
  OpenStack対応のため少し変更しています。以降の設計により変更可能性あり。
  正式フォーマットについては方式決定後、別途議論にて。

例）NIC1用

	{
	  "vfs": [
	    {
	      "name": "vf1",
	      "num_vhost": 2,	// 物理NICと対応するvhost数を決定。例として2個。
	      "num_ring": 4,	// vf構成は使用SPPコンポーネントが決まっているため、
	      					// “num_vhost x 2”。
	      					// 1vhostあたり以下の2ringが必要。
	      					// 	・classifier／forward
	      					// 	・forward／merge

★本質的には上記設定も不要には感じるが、C言語の特性上、最大値が決まっていないと不便。

	      // SPPコンポーネントは動的設定のため記載なし。
	      // プレースホルダとして記載するのも考えられるが、追々邪魔になりそうなので。
	      // ただ、実装コストによる。
	    }
	  ]

	  // 振分MACテーブル要素は動的追加なので記載なし。
	}


================================================================================
■SPP-VF起動 ＠SPP-HOSTマシン
================================================================================

※イメージなのでコマンドのパス等は適当。
※OpenStack連携時、spp_primary、spp_vf共に、
  コントローラへの接続先IPアドレス／ポート番号はspp-agentを指定する想定。

○各SPPプロセス起動。

	# SPP プライマリ起動
	sudo spp_primary 
			-c 0x02 						// 使用CPUセット。静的に決定。
			-n 4 							// (本議論外)静的
			--socket-mem 512,512 			// (本議論外)静的
			--huge-dir=/run/hugepages/kvm 	// (本議論外)静的
			--proc-type=primary 			// 固定
			-- 
			-p 0x03 						// 使用物理NICセット。静的に決定。
			-n 4 							// コンフィグのnum_ring同様に静的に決まる。
			-s 127.0.0.1:5555				// コントローラへの接続先IPアドレス／ポート番号

	# SPP セカンダリ起動（物理NIC毎）
	sudo spp_vf 
			-c 0x3ffd 						// 使用CPUセット。静的に決定。
			-n 4 							// (本議論外)静的
			--proc-type=secondary 			// 固定
			-- 
			--process-id 1					// セカンダリプロセス識別子。★現記載は例。以後検討。
			--config ./spp/spp_vf1.json		// 対象物理NICに対応する設定ファイルパス
			-s 127.0.0.1:5555				// コントローラへの接続先IPアドレス／ポート番号


================================================================================
■SPP-AGENTコネクション確立 ＠SPP-HOSTマシン
================================================================================

SPP-VF起動によりSPP-AGENTとコネクションが確立される。
当該コネクションがどのSPP-VFによるものかを判別するためプロセス識別子の取得を行う。

○プロセス識別取得

	{
	  "commands": [
	    {
	      "command": "process"
	    }
	  }
	}


================================================================================
■SPP-VF初期設定 ＠SPP-HOSTマシン
================================================================================

SPP-VFの起動後に1回行う。
共通で使用されるclassifier／mergeコンポーネントの登録を行う。

○classifier／mergeコンポーネント登録（ポートの追加）

	前提として1物理NIC1SPP-VFプロセスとしているため、
	登録するclassifier／mergeコンポーネントは1つずつ。

	例）

		{
		  "commands": [
		    {
		      "command": "component",
		      "core_id": "2",
		      "type": "none"
		    },
		    {
		      "command": "component",
		      "core_id": "2",
		      "type": "classifier",
		      "rx_ports": ["nic0"],
		      "tx_ports": ["ring0", "ring2"]
		    },
		    {
		      "command": "component",
		      "core_id": "3",
		      "type": "none"
		    },
		    {
		      "command": "component",
		      "core_id": "3",
		      "type": "merge",
		      "rx_ports": ["ring1", "ring3"],
		      "tx_ports": ["nic0"]
		    },
		    {
		      "command": "flush"
		    }
		  }
		}


================================================================================
■SPP VM起動 ＠SPP-HOSTマシン
================================================================================

○振分MACアドレス変更（配線相当）

	SPP-AGENTより以下の電文で振分MACアドレス、
	およびclassifier／vhostを結ぶforwardを登録。
	当該VMの仮想NIC数が複数の場合、本手順を仮想NIC分繰り返す。

★	仕様としては1電文内に複数コマンド可なので、
★	1電文の最大サイズ（コマンド数なのかメッセージサイズなのか？）要決定。

	例）vhost0とMACアドレスが00:11:22:33:44:55の仮想NICが接続される場合

		{
		  "commands": [
		    {
		      "command": "classifier_table",
		      "type": "mac",
		      "value": "00:11:22:33:44:55",
		      "port": "unuse"
		    },
		    {
		      "command": "classifier_table",
		      "type": "mac", 
		      "value": "00:11:22:33:44:55",
		      "port": "ring0"				// 当該vhostのrx-ring番号は以下で算出可能。
		      								// “vhost番号ｘ2”
		      								// （運用ルール化）
		    },
		    {
		      "command": "component",
		      "core_id": "4",				// 未使用CPUコアはSPP-AGENTにて管理想定。
		      "type": "forward",
		      "rx_ports": ["ring0"],
		      "tx_ports": ["vhost0"]
		    },
		    {
		      "command": "component",
		      "core_id": "5",				// 未使用CPUコアはSPP-AGENTにて管理想定。
		      "type": "forward",
		      "rx_ports": ["vhost0"],
		      "tx_ports": ["ring1"]
		    },
		    {
		      "command": "flush"
		    }
		  }
		}

○SPP VM起動

	VM起動。
	
	※本議論外のため割愛。
	※OpenStackなどにより、SPP範疇外で実施されることを想定。

○SPP VM設定

	vhostに接続するIFのUPなど。
	
	※本議論外のため割愛。
	※OpenStackや事前設定済みVMイメージの使用などにより、
	  SPP範疇外で実施されることを想定。


================================================================================
■SPP VM起動 ＠SPP-HOSTマシン
================================================================================

○SPP VM停止

	VM停止。

	※本議論外のため割愛。
	※OpenStackなどにより、SPP範疇外で実施されることを想定。

○振分MACアドレス変更（配線解除相当）

	SPP-AGENTより以下の電文で振分MACアドレス、
	およびclassifier／vhostを結ぶforwardの登録解除。
	当該VMの仮想NIC数が複数の場合、本手順を仮想NIC分繰り返す。

★	仕様としては1電文内に複数コマンド可なので、
★	1電文の最大サイズ（コマンド数なのかメッセージサイズなのか？）要決定。

	例）MACアドレスが00:11:22:33:44:55の仮想NICを解除する場合

		{
		  "commands": [
		    {
		      "command": "classifier_table",
		      "type": "mac",
		      "value": "00:11:22:33:44:55",
		      "port": "unuse"
		    },
		    {
		      "command": "component",
		      "core_id": "4",				// 使用CPUコアはSPP-AGENTにて管理想定。
		      "type": "none"				//★同様の意図で使用される単語が振分テーブルと異なっている。
		    },								//  ミスを誘発する可能性があるので変更するか以後検討。
		    {
		      "command": "component",
		      "core_id": "5",				// 使用CPUコアはSPP-AGENTにて管理想定。
		      "type": "none"
		    },
		    {
		      "command": "flush"
		    }
		  }
		}
