
================================================================================
■マシン構成
================================================================================

SPP-HOSTマシン ： SPPを実行し、SPPと接続するVMを起動するマシン。
SPP-VMマシン   ： SPP-HOSTマシン上で起動されるSPPと接続するVM。
対向マシン     ： SPP-VMとパケット送受信する、SPP-HOSTマシンと異なる外部マシン。


================================================================================
■前提
================================================================================

・本手順はUbuntu16.04で実施。
・kvm/qemuインストール済み。
・動作確認qemuバージョンは“2.3.0(ivshmem対応バージョン)”。
		https://github.com/garogers01/soft-patch-panel/tree/master/qemu-2.3.0
・SPP-VMのVM自体の作成は通常の手順で実施。


================================================================================
■hugepage設定 ＠SPP-HOSTマシン
================================================================================

○qemuの実行権をrootに変更

	$ sudo vi /etc/libvirt/qemu.conf

		#user = "root"
		↓
		user = "root"

		#group = "root"
		↓
		group = "root"


○KVMのhugepage設定

	$ sudo vi /etc/default/qemu-kvm

		KVM_HUGEPAGES=0
		↓
		KVM_HUGEPAGES=1


○デフォルトのhugepageサイズとisolcpusの設定(設定値は必要に応じて変更する)

	$ sudo vi /etc/default/grub

		GRUB_CMDLINE_LINUX_DEFAULT="isolcpus=2,4,6,8,10,12-18,20,22,24,26-42,44,46 hugepagesz=1G hugepages=36 default_hugepagesz=1G"


○grubの更新と再起動

	$ sudo update-grub
	$ sudo reboot


○hugepage状態の確認

	$ cat /proc/meminfo | grep -i huge

		AnonHugePages:      2048 kB
		HugePages_Total:      36		←	/etc/default/grubで指定した値
		HugePages_Free:       36
		HugePages_Rsvd:        0
		HugePages_Surp:        0
		Hugepagesize:    1048576 kB		←	/etc/default/grubで指定した値

	$ mount | grep -i huge

		cgroup on /sys/fs/cgroup/hugetlb type cgroup (rw,nosuid,nodev,noexec,relatime,hugetlb,release_agent=/run/cgmanager/agents/cgm-release-agent.hugetlb,nsroot=/)
		hugetlbfs on /dev/hugepages type hugetlbfs (rw,relatime)
		hugetlbfs-kvm on /run/hugepages/kvm type hugetlbfs (rw,relatime,mode=775,gid=117)
		hugetlb on /run/lxcfs/controllers/hugetlb type cgroup (rw,relatime,hugetlb,release_agent=/run/cgmanager/agents/cgm-release-agent.hugetlb,nsroot=/)


○デフォルトのhugepage(未使用)をアンマウント

	$ sudo umount /dev/hugepages


================================================================================
■janssonインストール ＠SPP-HOSTマシン
================================================================================

※jansson：C言語のJSONライブラリ。

※本手順は、インターネット接続可能な環境にて実施する必要があります
  janssonファイルを入手しjson_pathを適用後、SPP-HOSTへ配置します

※プロキシ設定が必要な環境の場合は以下を実施
○プロキシ設定

	※http://202.213.220.102:80は環境に合わせ変更する

	$ git config --global http.proxy http://202.213.220.102:80

	設定内容の確認
	$ cat .gitconfig
	  proxy=設定したプロキシ内容となっていることを確認


○janssonの入手

	$ sudo git clone https://github.com/rogerz/jansson


○json_pathパッチの適用

	$ cd jansson
	$ sudo git checkout json_path
	Branch json_path set up to track remote branch json_path from origin.
	Switched to a new branch 'json_path'


○jansson一式を移動

	$ sudo mkdir -p /opt/jansson
	$ sudo mv jansson /opt/jansson


○janssonのインストール

	$ cd /opt/jansson/jansson
	$ sudo autoreconf -i
	$ sudo ./configure
	$ sudo make
	$ sudo make install
	$ sudo ldconfig

	$ ls -al /usr/local/include

		total 24
		drwxr-xr-x  2 root root 4096 Jul 28 16:45 .
		drwxr-xr-x 10 root root 4096 May 27 10:23 ..
		-rw-r--r--  1 root root 1183 Jul 28 16:45 jansson_config.h
		-rw-r--r--  1 root root 9499 Jul 28 16:45 jansson.h


================================================================================
■DPDKインストール ＠SPP-HOSTマシン
================================================================================

○dpdk-17.05をインストール。

	$ cd DPDKインストールディレクトリ（ex. /home/hoge/dpdk-17.05）
	$ export RTE_SDK=`pwd`
	$ export RTE_TARGET=x86_64-native-linuxapp-gcc
	$ make T=x86_64-native-linuxapp-gcc install

	※DPDKを構築する上で必要なパッケージについてはDPDK公式ドキュメントを参照。


以降、下記環境変数が設定されているとします。

	export RTE_SDK=DPDKインストールディレクトリ（ex. /home/hoge/dpdk-17.05）


================================================================================
■SPPビルド ＠SPP-HOSTマシン
================================================================================

○SPP-VFのソース一式を取得

	$ git clone https://github.com/ntt-ns/Soft-Patch-Panel.git
		※URLは2017/07/04時点

以降、下記環境変数が設定されているとします。

	export SPP_HOME=SPPインストールディレクトリ（ex. /home/hoge/spp-17.05）


○SPPビルド

	$ cd $SPP_HOME
	$ make


================================================================================
■DPDKバインド ＠SPP-HOSTマシン
================================================================================

○uioモジュールのロード

	$ sudo modprobe uio
	$ sudo insmod $RTE_SDK/x86_64-native-linuxapp-gcc/kmod/igb_uio.ko
	$ lsmod | grep uio

		igb_uio                16384  0				← igb_uioがロードされている
		uio                    20480  1 igb_uio


○DPDKバインド

	※指定するPCI番号は環境に合わせ指定する
	$ sudo $RTE_SDK/usertools/dpdk-devbind.py --bind=igb_uio PCI番号

サンプル設定ではSPP-VFは物理NICを2つ使用するため、2NICのバインドが必要。


================================================================================
■SPP-VMにVHOSTの設定を追加 ＠SPP-HOSTマシン
================================================================================

	$ virsh edit SPP-VM名

	<domain type='kvm' xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'>

	〜省略〜

	  <memoryBacking>
	     <hugepages/>
	  </memoryBacking>

	〜省略〜

	 <type arch='x86_64' machine='pc-i440fx-2.3'>hvm</type>

	〜省略〜

	 <emulator>/usr/local/bin/qemu-system-x86_64</emulator>

	〜省略〜

	  <qemu:commandline>
	    <qemu:arg value='-cpu'/>
	    <qemu:arg value='host'/>

	※共通
	    <qemu:arg value='-object'/>
	    <qemu:arg value='memory-backend-file,id=mem,size=4096M,mem-path=/run/hugepages/kvm,share=on'/>
	    <qemu:arg value='-numa'/>
	    <qemu:arg value='node,memdev=mem'/>
	    <qemu:arg value='-mem-prealloc'/>

	※例）VHOST0用
	    <qemu:arg value='-chardev'/>
	    <qemu:arg value='socket,id=chr0,path=/tmp/sock0'/>
	    <qemu:arg value='-device'/>
	    <qemu:arg value='virtio-net-pci,netdev=vhost-net0'/>
	    <qemu:arg value='-netdev'/>
	    <qemu:arg value='vhost-user,id=vhost-net0,chardev=chr0,vhostforce'/>

	※例）VHOST1用
	    <qemu:arg value='-chardev'/>
	    <qemu:arg value='socket,id=chr1,path=/tmp/sock1'/>
	    <qemu:arg value='-device'/>
	    <qemu:arg value='virtio-net-pci,netdev=vhost-net1'/>
	    <qemu:arg value='-netdev'/>
	    <qemu:arg value='vhost-user,id=vhost-net1,chardev=chr1,vhostforce'/>

	※上記のVHOST用の設定の5か所の数字は、接続するVHOSTの番号と合わせる。
	※VHOSTの番号は使用手順に記載のspp.jsonと合わせる。

	  </qemu:commandline>


参考：試験使用VMの設定XML

	<domain type='kvm' xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'>
	  <name>spp-vm1</name>
	  <uuid>d90f5420-861a-4479-8559-62d7a1545cb9</uuid>
	  <memory unit='KiB'>4194304</memory>
	  <currentMemory unit='KiB'>4194304</currentMemory>
	  <memoryBacking>
	    <hugepages/>
	  </memoryBacking>
	  <vcpu placement='static'>4</vcpu>
	  <os>
	    <type arch='x86_64' machine='pc-i440fx-2.3'>hvm</type>
	    <boot dev='hd'/>
	  </os>
	  <features>
	    <acpi/>
	    <apic/>
	    <pae/>
	  </features>
	  <clock offset='utc'/>
	  <on_poweroff>destroy</on_poweroff>
	  <on_reboot>restart</on_reboot>
	  <on_crash>restart</on_crash>
	  <devices>
	    <emulator>/usr/local/bin/qemu-system-x86_64</emulator>
	    <disk type='file' device='disk'>
	      <driver name='qemu' type='raw'/>
	      <source file='/var/lib/libvirt/images/spp-vm1.qcow2'/>
	      <target dev='hda' bus='ide'/>
	      <address type='drive' controller='0' bus='0' target='0' unit='0'/>
	    </disk>
	    <disk type='block' device='cdrom'>
	      <driver name='qemu' type='raw'/>
	      <target dev='hdc' bus='ide'/>
	      <readonly/>
	      <address type='drive' controller='0' bus='1' target='0' unit='0'/>
	    </disk>
	    <controller type='usb' index='0'>
	      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x2'/>
	    </controller>
	    <controller type='pci' index='0' model='pci-root'/>
	    <controller type='ide' index='0'>
	      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x1'/>
	    </controller>
	    <interface type='network'>
	      <mac address='52:54:00:99:aa:7f'/>
	      <source network='default'/>
	      <model type='rtl8139'/>
	      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0'/>
	    </interface>
	    <serial type='pty'>
	      <target type='isa-serial' port='0'/>
	    </serial>
	    <console type='pty'>
	      <target type='serial' port='0'/>
	    </console>
	    <memballoon model='virtio'>
	      <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/>
	    </memballoon>
	  </devices>
	  <qemu:commandline>
	    <qemu:arg value='-cpu'/>
	    <qemu:arg value='host'/>
	    <qemu:arg value='-object'/>
	    <qemu:arg value='memory-backend-file,id=mem,size=4096M,mem-path=/run/hugepages/kvm,share=on'/>
	    <qemu:arg value='-numa'/>
	    <qemu:arg value='node,memdev=mem'/>
	    <qemu:arg value='-mem-prealloc'/>
	    <qemu:arg value='-chardev'/>
	    <qemu:arg value='socket,id=chr0,path=/tmp/sock0'/>
	    <qemu:arg value='-device'/>
	    <qemu:arg value='virtio-net-pci,netdev=vhost-net0'/>
	    <qemu:arg value='-netdev'/>
	    <qemu:arg value='vhost-user,id=vhost-net0,chardev=chr0,vhostforce'/>
	    <qemu:arg value='-chardev'/>
	    <qemu:arg value='socket,id=chr1,path=/tmp/sock1'/>
	    <qemu:arg value='-device'/>
	    <qemu:arg value='virtio-net-pci,netdev=vhost-net1'/>
	    <qemu:arg value='-netdev'/>
	    <qemu:arg value='vhost-user,id=vhost-net1,chardev=chr1,vhostforce'/>
	  </qemu:commandline>
	</domain>


================================================================================
■トラブルシューティング：VMが起動しない場合（Ubuntu） ＠SPP-HOSTマシン
================================================================================

appamorにより、
/tmp/sockXファイルのパーミッションエラーが発生する場合があります。
発生時は以下を試行ください。

	$ sudo ln -s /etc/apparmor.d/usr.lib.libvirt.virt-aa-helper /etc/apparmor.d/disable/usr.lib.libvirt.virt-aa-helper
	$ sudo ln -s /etc/apparmor.d/usr.sbin.libvirtd /etc/apparmor.d/disable/usr.sbin.libvirtd
	$ sudo apparmor_parser -R /etc/apparmor.d/usr.lib.libvirt.virt-aa-helper
	$ sudo apparmor_parser -R /etc/apparmor.d/usr.sbin.libvirtd
	$ sudo service apparmor reload
	$ sudo service apparmor restart
	$ sudo service libvirt-bin restart 

上記を試行しても解決されない場合、appamor自体の削除もお試しください。

	$ sudo apt-get remove apparmor


================================================================================
■トラブルシューティング：VMが起動しない場合（CentOS） ＠SPP-HOSTマシン
================================================================================

SELinuxにより、
/tmp/sockXファイルのパーミッションエラーが発生する場合があります。
発生時は以下を試行ください。

	$ sudo vi /etc/selinux/config

		SELINUX=enforcing
			↓
		SELINUX=disabled

保存後マシン再起動。以下コマンドで無効になっていることを確認。

	$ getenforce

		Disabled	← 無効になっていること。

