■目的

	* パケットの宛先MACアドレスから振り分け先を決定する。

	* 1コアを割り当て可能にするため、
		スレッドとしてrte_eal_remote_launch関数で起動可能な関数を用意する。


■概要

	* MACアドレス／転送先DPDKポート番号対応テーブル作成

		関数起動時、コンフィグファイルにより指定されたMAC振り分けテーブル、各IF情報からテーブルを作成。

		テーブルはDPDKのHash Libraryを使用する。
			http://dpdk.org/doc/guides/prog_guide/hash_lib.html

		|	キー						|	MACアドレス数値（int64_t）										|
		|	値							|	振り分け先情報（書き込み先DPDKポート番号）						|
		|	ハッシュアルゴリズム		|	Cuckoo Hashing													|
		|	ハッシュ値計算アルゴリズム	|	CPUがSSE4.2に対応している場合はCRC、未対応の場合はjenkins hash	|

		ハッシュ値計算アルゴリズムについてはDPDKサンプル（dpdk-17.05\examples\l3fwd-vf）を参考。
		SSE4.2ではCRC-32を計算する命令が追加されているためと考えます。

	* パケット読み取り

		コンフィグファイルにより指定されたキューからパケットを読み取る。
		rte_eth_rx_burst関数を使用する。

★		読取最大パケット数はXXX。

	* パケット振り分け

		# 転送先DPDKポート番号毎のmbuf配列を用意する。
		# 読み取ったパケットリストを先頭から順に走査し、宛先MACアドレスから転送先DPDKポート番号を決定する。
		# 転送先に決定されたDPDKポート番号用のmbuf配列にパケットを登録する。
		# 上記処理を読み取ったパケット全てに行う。

		DPDKポート番号毎のmbuf配列の要素数は読取最大パケット数と同等。

	* パケット書き込み

		転送先振り分けで設定された転送先DPDKポート番号毎mbuf配列リストを先頭から順に走査し、DPDKポート番号毎にまとめてキューに書き込む。
		rte_eth_tx_burst関数を使用する。

		※1回のパケット読み取りで読み取られたパケットリストを振り分けるため、DPDKポート番号毎mbuf配列の登録数は最大要素数にならない場合はある。

	* 振り分け先なしパケットの扱い

		振り分けテーブルに登録がない宛先MACアドレスを持つパケットは破棄する。
		rte_pktmbuf_free関数を使用する。

		|	*Note：* デフォルトの振り分け先を決めてそこに流すなども考えられますが、スプリント1としては破棄が良いと考えます。
			設定ミスやバグなどがあった場合にVMに届きませんので、問題発生が判り易いかと考えます。	|

		破棄の際はログ出力を行う。
		RTE_LOG(NOTICE)マクロを使用する。

		|	*Note：* 性能観点ではログではなくカウンタですが、今回の場合、本ログが出力されるのは設定ミス／バグでしかないため、
			性能測定時には出力されない想定。また、出力される場合は設定修正のために不正値を参照できる必要があり、カウンタでは役不足。	|

	* イーサ以外のパケットの扱い

		考慮しない


■前提条件

	* 動的な振り分けテーブルの更新は行わない。振り分けテーブルの作成はプロセス起動時のみ。


■外部関数イメージ

	* スレッド処理

		スレッドとして起動される関数。
		初期化処理を行い、処理ループを行う。
		処理ループ内にて、パケット読み取り／振り分け／書き込みを行う。


■内部関数イメージ（代表的なもの）

	* 初期化

		振り分けテーブルを作成する。

	* パケット読み取り

		読み取り元キューからパケットを読み取る。

	* パケット振り分け

		パケットの宛先MACアドレスから書き込み先配列へパケットを振り分ける。

	* パケット書き込み

		書き込み先配列からパケットを各書き込み先キューへ書き込む。